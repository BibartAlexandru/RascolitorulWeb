<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.KernelMemory.Service.AspNetCore</name>
    </assembly>
    <members>
        <member name="P:Microsoft.KernelMemory.Service.AspNetCore.Models.HttpDocumentUploadRequest.Index">
            <summary>
            Name of the index where to store the data uploaded.
            </summary>
        </member>
        <member name="P:Microsoft.KernelMemory.Service.AspNetCore.Models.HttpDocumentUploadRequest.DocumentId">
            <summary>
            ID of the document.
            Note: the document might contain multiple files, which are identified by filename instead.
            </summary>
        </member>
        <member name="P:Microsoft.KernelMemory.Service.AspNetCore.Models.HttpDocumentUploadRequest.Tags">
            <summary>
            Optional tags to apply to the memories extracted from the document.
            Tags allow to filter memory records when searching and asking questions.
            </summary>
        </member>
        <member name="P:Microsoft.KernelMemory.Service.AspNetCore.Models.HttpDocumentUploadRequest.Steps">
             <summary>
             Pipeline steps to execute, aka handlers uses to process the data uploaded.
            
             By default, KM processes files extracting text ('extract' step), chunking ('partition' step),
             calculating embeddings ('gen_embeddings' step), and storing records ('save_records').
             - The 'extract' step by default maps to TextExtractionHandler
             - The 'partition' step by default maps to TextPartitioningHandler
             - The 'gen_embeddings' step by default maps to GenerateEmbeddingsHandler
             - The 'save_records' step by default maps to SaveRecordsHandler
             The solution contains other handlers like SummarizationHandler
            
             These steps can be changed and customized, using custom handlers, implementing bespoke flows.
             For example, you can create handlers to zip files, send emails, write to DBs, etc.
             </summary>
        </member>
        <member name="P:Microsoft.KernelMemory.Service.AspNetCore.Models.HttpDocumentUploadRequest.Files">
            <summary>
            Files uploaded
            </summary>
        </member>
        <member name="P:Microsoft.KernelMemory.Service.AspNetCore.Models.HttpDocumentUploadRequest.ContextArguments">
            <summary>
            Optional custom arguments passed to handlers and other internal components.
            This collection can be used to pass custom data, to override default behavior, etc.
            </summary>
        </member>
        <member name="T:Microsoft.KernelMemory.WebApplicationBuilderExtensions">
            <summary>
            DI extension methods to inject KM into WebApplication
            </summary>
        </member>
        <member name="M:Microsoft.KernelMemory.WebApplicationBuilderExtensions.AddKernelMemory(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Action{Microsoft.KernelMemory.IKernelMemoryBuilder},System.Action{Microsoft.KernelMemory.IKernelMemory})">
            <summary>
            Build and add KM Memory singleton instance to your web app.
            </summary>
            <param name="appBuilder">Hosting application builder</param>
            <param name="configureMemoryBuilder">Optional configuration steps for the memory builder</param>
            <param name="configureMemory">Optional configuration steps for the memory instance</param>
        </member>
    </members>
</doc>
